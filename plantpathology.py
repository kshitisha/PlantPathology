# -*- coding: utf-8 -*-
"""PlantPathology.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yVOidZ-1nNJM-yJuervf3FmpWHAI5XTx
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install xgboost -q
image_dir = "/content/drive/MyDrive/plant_pathology_2020/images"
labels_csv = "/content/drive/MyDrive/plant_pathology_2020/train.csv"

import pandas as pd
import numpy as np
import cv2
from skimage.feature import hog
from tqdm import tqdm
import os

df = pd.read_csv(labels_csv)

label_cols = ['healthy', 'multiple_diseases', 'rust', 'scab']
df['label'] = df[label_cols].idxmax(axis=1)

def extract_features(img_path):
    img = cv2.imread(img_path)
    if img is None:
        return None
    img = cv2.resize(img, (128, 128))
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    return hog(gray, pixels_per_cell=(16, 16), cells_per_block=(2, 2), feature_vector=True)

X, y = [], []
for idx, row in tqdm(df.iterrows(), total=len(df)):
    img_file = os.path.join(image_dir, row['image_id'] + ".jpg")
    features = extract_features(img_file)
    if features is not None:
        X.append(features)
        y.append(row['label'])

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.metrics import classification_report, accuracy_score, precision_score, f1_score, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

X = np.array(X)
y = np.array(y)

le = LabelEncoder()
y_encoded = le.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

svm_model = SVC(kernel='linear')
svm_model.fit(X_train, y_train)
y_pred_svm = svm_model.predict(X_test)

xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='mlogloss')
xgb_model.fit(X_train, y_train)
y_pred_xgb = xgb_model.predict(X_test)

print("random forest:")
print(classification_report(y_test, y_pred_rf))
print("SVM:")
print(classification_report(y_test, y_pred_svm))
print("XGBoost:")
print(classification_report(y_test, y_pred_xgb))

os.makedirs('results', exist_ok=True)
models = {'random Forest': (rf_model, y_pred_rf), 'SVM': (svm_model, y_pred_svm), 'XGBoost': (xgb_model, y_pred_xgb)}
for name, (model, preds) in models.items():
    acc = accuracy_score(y_test, preds)
    prec = precision_score(y_test, preds, average='macro', zero_division=0)
    f1 = f1_score(y_test, preds, average='macro')
    print(f"{name} - accuracy: {acc:.4f}, precision: {prec:.4f}, F1 Score: {f1:.4f}")



    disp = ConfusionMatrixDisplay.from_estimator(model, X_test, y_test, display_labels=le.classes_)
    plt.title(f"{name} Confusion Matrix")
    plt.savefig(f"results/{name.lower().replace(' ', '_')}_cm.png")
    plt.close()

    #this saves my  classification report as TXT
    with open(f"results/{name.lower().replace(' ', '_')}_report.txt", 'w') as f:
        f.write(classification_report(y_test, preds))

import joblib
joblib.dump(rf_model, 'plant_disease_model.pkl')

drive_results_path = '/content/drive/MyDrive/PlantPathology-Results'


os.makedirs(drive_results_path, exist_ok=True)

!cp -r results/* "$drive_results_path/"
!cp plant_disease_model.pkl "$drive_results_path/"

print(f"all files copied to Google Drive at {drive_results_path}")